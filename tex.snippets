global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet template "Basic template" b
\documentclass[12pt]{article} 
\usepackage{amsmath, amsfonts, amsthm, amssymb, graphicx}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage[framemethod=TikZ]{mdframed}
	
\theoremstyle{plain}
\newtheorem{thm}{Theorem}
\newtheorem{lemma}{Lemma}
\newtheorem{coro}{Corollary}
\newtheorem{prop}{Proposition}

\renewcommand*{\thefootnote}{\fnsymbol{footnote}}
\renewcommand\qedsymbol{}

\theoremstyle{remark} 
\newtheorem{case}{Case}

\newcommand{\rr}{\ensuremath{\mathbb{R}}}
\newcommand{\zz}{\ensuremath{\mathbb{Z}}}
\newcommand{\qq}{\ensuremath{\mathbb{Q}}}
\newcommand{\nn}{\ensuremath{\mathbb{N}}}
\newcommand{\ff}{\ensuremath{\mathbb{F}}}

\providecommand{\norm}[1]{\lVert#1\rVert}

\pdfsuppresswarningpagegroup=1

\begin{document}
$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "section{}" bA
\\section{$1}
endsnippet

snippet ssec "subsection{}" bA
\\subsection{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet proof "Proof environment" b
\begin{proof}
$0
\end{proof}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet <= "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet eqn "Equation aligned" bA
\begin{equation*}
\begin{split}
	${1:${VISUAL}}
\end{split}
\end{equation*}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])nn' "auto subscript n" wrA
`!p snip.rv = match.group(1)`_n
endsnippet

context "math()"
snippet '([A-Za-z])kk' "auto subscript k" wrA
`!p snip.rv = match.group(1)`_k
endsnippet

context "math()"
snippet '([A-Za-z])ii' "auto subscript i" wrA
`!p snip.rv = match.group(1)`_i
endsnippet

context "math()"
snippet '([A-Za-z])_([A-Za-z])(\+|-)(\d)' "auto subscript n (or any letter) +/- d" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)``!p snip.rv = match.group(3)``!p snip.rv = match.group(4)`}
endsnippet

context "math()"
snippet == "equals, used in aligned environment" iA
&= $1 \\\\
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet ( "( )" i
(${1:${VISUAL}}) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet { "{ }" i
\{${1:${VISUAL}}\} $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\langle${1:${VISUAL}} \rangle$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet 'infsum:([a-z])(\d)' "infinite sum" rwA
\sum_{ ${1:`!p snip.rv = match.group(1)`=`!p snip.rv = match.group(2)`}}^{\infty} ${2:}
endsnippet

context "math()"
snippet 'sum:([a-z])(\d)([A-Za-z]|\d)' "sum" rwA
\sum_{ ${1:`!p snip.rv = match.group(1)`=`!p snip.rv = match.group(2)`}}^{ ${2:`!p snip.rv = match.group(3)`}} ${3:}
endsnippet

priority 300
context "math()"
snippet 'inflim:([a-z])' "limit" rwA
\lim_{ ${1:`!p snip.rv = match.group(1)`} \to \infty} ${2:}
endsnippet

priority 300
context "math()"
snippet 'lim:([a-z])([A-Za-z]|\d)' "limit" rwA
\lim_{ ${1:`!p snip.rv = match.group(1)`} \to ${2:`!p snip.rv = match.group(2)`}} 
endsnippet

priority 300
context "math()"
snippet 'int:([a-z]|\d)([a-z]|\d)' "integral" rwA
\int_{ ${1:`!p snip.rv = match.group(1)`}}^{ ${2:`!p snip.rv = match.group(2)`}} ${3:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet 'infint:(\d)' "infinity integral" rwA
\int_{`!p snip.rv = match.group(1)`}^{\infinity} ${1:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet 'infint2' "negative to infinity integral" rwA
\int_{-\infinity}^{\infinity} ${1:${VISUAL}} $0
endsnippet

context "math()"
snippet part "partial derivative" w
\frac{\partial ${1:f}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... degree" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... degree" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet ee "there exists" iA
\exists 
endsnippet

context "math()"
snippet aa "forall" iA
\forall 
endsnippet

context "math()"
snippet '([a-zA-Z])nn' "([a-zA-Z])n" irA
`!p snip.rv = match.group(1)`_n
endsnippet

context "math()"
snippet '([a-zA-Z])kk' "([a-zA-Z])k" irA
`!p snip.rv=match.group(1)`_k
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

context "math()"
snippet mc "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nab "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet ss "subset" Ai
\subset 
endsnippet

snippet nin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet UU "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet NN "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

context "math()"
snippet rr "real" iA
\rr
endsnippet

context "math()"
snippet qq "Q" iA
\qq
endsnippet

context "math()"
snippet zz "Z" iA
\zz
endsnippet

context "math()"
snippet nb "N" iA
\nn
endsnippet

context "math()"
snippet cc "C" iA
\cc
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

context "math()"
snippet '([A-Za-z])'' "function first derivative" wr
`!p snip.rv=match.group(1)`'($1)$0
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet tbf "\textbf{}" iA
\\textbf{$1}
endsnippet

# vim:ft=snippets
